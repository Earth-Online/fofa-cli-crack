recommandation_json = {
	"Sql":{
		"name":"Sql注入",
		"wh":"黑客可以直接执行SQL语句，从而控制整个服务器：获取数据、修改数据、删除数据等。",
		"jy":"<p>1.在网页代码中需要对用户输入的数据进行严格过滤。</p><p>2.部署Web应用防火墙，对数据库操作进行监控。</p><p>3.升级至最新版本。</p>"
	},
	"Xss":{
		"name":"XSS跨站",
		"wh":"<p>网络钓鱼，盗取管理员或用户帐号和隐私信息等；</p><p>劫持合法用户会话，利用管理员身份进行恶意操作，篡改页面内容、进一步渗透网站:</p><p>网页挂马、传播跨站脚本蠕虫等；</p><p>控制受害者机器向其他系统发起攻击。</p>",
		"jy":"<p>设置httponly</p><p>xss filter</p><p>编码转义</p>"
	},
	"Fileinclude":{
		"name":"文件包含",
		"wh":"<p>本地文件包含：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;1.包含本地敏感的文件，如：Web应用、数据库配置文件、config文件。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;2.配合上传漏洞和目录遍历漏洞可导致系统沦陷。</p><p>远程文件包含:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;加载有害的远程内容，影响程序运行。</p>",
		"jy":"<p>1、查看包含的内容是否为用户所控制，若是，那么严格过滤。</p><p>2、升级至最新版本。</p>"
	},
	"Filedownload":{
		"name":"文件下载",
		"wh":"代码实现了将文件下载到客户端，但是如果没有对传入的参数进行过滤，就可以实现下载服务任何文件，产生任意文件下载漏洞。比如下载数据库配置文件，可以导致黑客顺利进入数据库或者系统的敏感信息。导致网站或者服务器沦陷。",
		"jy":"<p> 1、在下载前对传入的参数进行过滤，直接将..替换成空，就可以简单实现防范的目的。</p><p>2、对下载文件类型进行检查，判断是否允许下载类型。</p><p>3、升级至最新版本</p>"
	},
	"Codeexecute":{
		"name":"代码执行漏洞",
		"wh":"可能导致攻击者在服务器端任意执行代码，进而控制整个web服务器。",
		"jy":"<p>1、始终对变量初始化。</p><p>2、使用此类函数时，严格检查输入的参数值，尽量避免使用此类函数。</p><p>3、升级至最新版本</p>"
	},
	"Commandexecute":{
		"name":"命令执行",
		"wh":"黑客可在服务器上执行任意命令，写入后门，从而入侵服务器，获取服务器的管理员权限，危害巨大。",
		"jy":"<p>严格过滤用户输入的数据，禁止执行系统命令。</p>"
	},
	"Readanyfile":{
		"name":"任意文件读取",
		"wh":"泄露源码、数据库配置文件等等，导致网站处于极度不安全状态。",
		"jy":"<p>1、限定目录。</p><p>2、白名单限定可读取路径。</p>"
	},
	"uploadfile":{
		"name":"文件上传",
		"wh":"导致黑客可以上传恶意文件到服务器，获取服务器权限。",
		"jy":"<p>1、上传文件的存储目录禁用执行权限。</p><p>2、文件的后缀白名单。</p><p>3、升级至最新版本。</p>"
	},
	"Readdir":{
		"name":"目录遍历",
		"wh":"直接访问攻击者想要的敏感数据 ，包括配置文件、日志、源代码等，配合其它漏洞的综合利用，攻击者可以轻易的获取更高的权限。",
		"jy":"<p>对文件后缀进行白名单控制，对包含了恶意的符号或者空字节进行拒绝</p>"
	},
	"Infoleakage":{
		"name":"信息泄露",
		"wh":"<p>攻击者可直接下载用户的相关信息，包括网站的绝对路径、用户的登录名、密码、真实姓名、身份证号、电话号码、邮箱、QQ号等。</p><p>攻击者通过构造特殊URL地址，触发系统web应用程序报错，在回显内容中，获取网站敏感信息。</p><p>攻击者利用泄漏的敏感信息，获取网站服务器web路径，为进一步攻击提供帮助。</p>",
		"jy":"<p>对网站错误信息进行统一返回，模糊化处理。</p><p>对存放敏感信息的文件进行加密并妥善储存，避免泄漏敏感信息。</p>"
	}
};